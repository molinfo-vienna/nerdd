version_settings(constraint='>=0.31.2')

load('ext://namespace', 'namespace_create', 'namespace_inject')

namespace_create('kafka')

# helper function
def load_objects(dir_or_file, namespace):
    if str(type(dir_or_file)) == "list":
        all_objects = []
        for file in dir_or_file:
            all_objects.extend(load_objects(file, namespace))
    elif dir_or_file.endswith('.yaml') or dir_or_file.endswith('.yml'):
        # if the specified path is a file, just load it
        namespaced_yaml = namespace_inject(read_file(dir_or_file), namespace)
        resources = decode_yaml_stream(namespaced_yaml)
        k8s_yaml(namespaced_yaml)

        all_objects = [
           '%s:%s:%s' % (r['metadata']['name'], r['kind'], r['metadata']['namespace']) 
            for r in resources
        ]
    else:
        # for each yaml file in the specified directory
        # * collect all specified resources (crds, deployments, etc)
        # * inject the kafka namespace
        all_objects = []
        for file in listdir(dir_or_file, recursive=True):
            if file.endswith('.yaml') or file.endswith('.yml'):
                new_objects = load_objects(file, namespace)
                all_objects.extend(new_objects)

    return all_objects

#
# KAFKA
#
all_objects = load_objects('./cluster-operator', 'kafka')

# remove the cluster operator from the list of objects, because tilt can only recognize
# it as a workload
all_objects.remove('strimzi-cluster-operator:Deployment:kafka')

# add namespace to list of objects
all_objects.append('kafka:namespace')

k8s_resource(
    workload='strimzi-cluster-operator', 
    objects=all_objects, 
    labels=["kafka"]
)

all_objects = load_objects(['kafka.yml', 'topic_jobs.yml', 'topic_results.yml'], 'kafka')

k8s_resource(
    new_name='kafka',
    objects=all_objects,
    resource_deps=['strimzi-cluster-operator'],
    labels=["kafka"]
)

#
# KEDA
#
all_objects = load_objects('keda-2.10.1.yaml', 'keda')

# remove the deployments and services from the list of objects, because tilt can only 
# recognize it as a workload
all_objects.remove('keda-admission-webhooks:Service:keda')
all_objects.remove('keda-metrics-apiserver:Service:keda')
all_objects.remove('keda-operator:Service:keda')
all_objects.remove('keda-admission:Deployment:keda')
all_objects.remove('keda-metrics-apiserver:Deployment:keda')
all_objects.remove('keda-operator:Deployment:keda')

k8s_resource(
    objects=all_objects, 
    new_name='keda',
    labels=["kafka"]
)

k8s_resource(
    workload='keda-operator', 
    resource_deps=['kafka', 'keda'],
    labels=["kafka"]
)

k8s_resource(
    workload='keda-metrics-apiserver', 
    resource_deps=['kafka', 'keda', 'keda-operator'],
    labels=["kafka"]
)

k8s_resource(
    workload='keda-admission', 
    resource_deps=['kafka', 'keda', 'keda-operator'],
    labels=["kafka"]
)

#
# REDPANDA
#
k8s_yaml('redpanda_console.yml')
k8s_resource(
    'redpanda-console',
    port_forwards=8080,
    resource_deps=['kafka'],
    labels=["kafka"]
)