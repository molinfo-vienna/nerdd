apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: deploy-backend-image
  # The dash at the end is intentional:
  generateName: deploy-backend-image-
spec:
  entrypoint: push-image
  
  arguments:
    parameters:
      - name: module-name
        value: nerdd-backend
      - name: module-repo
        value: https://github.com/molinfo-vienna/nerdd-backend.git
      - name: nerdd-repo
        value: https://github.com/molinfo-vienna/nerdd.git
      - name: image-registry
        value: ghcr.io/molinfo-vienna/nerdd/

  templates:
    - name: push-image
      dag:
        tasks:
          - name: clone-nerdd
            template: git-clone
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.nerdd-repo}}"
                - name: path
                  value: nerdd
          - name: clone-module
            template: git-clone
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.module-repo}}"
                - name: path
                  value: "{{workflow.parameters.module-name}}"
          - name: build-image
            template: build-image
            arguments:
              parameters:
                - name: image-path
                  value: "{{workflow.parameters.image-registry}}/{{workflow.parameters.module-name}}:{{tasks.clone-nerdd.outputs.parameters.version}}-{{tasks.clone-module.outputs.parameters.version}}"
            dependencies: [clone-module, clone-nerdd]
          - name: ls
            template: ls
            dependencies: [build-image]
          - name: deploy-image
            arguments:
              parameters:
                - name: image-registry
                  value: "{{workflow.parameters.image-registry}}"
                - name: image-path
                  value: "{{workflow.parameters.image-registry}}/{{workflow.parameters.module-name}}:{{tasks.clone-nerdd.outputs.parameters.version}}-{{tasks.clone-module.outputs.parameters.version}}"
            template: deploy-image
            dependencies: [build-image]
        
    - name: git-clone
      inputs:
        parameters:
          - name: repo
            value: ""
          - name: path
            value: ""
        artifacts:
          - name: git-source
            path: /src
            git:
              repo: "{{inputs.parameters.repo}}"
              revision: "main"
              # if the repository is private, we need an account that can access it:
              # usernameSecret:
              #   name: github-credentials
              #   key: username
              # passwordSecret:
              #   name: github-credentials
              #   key: password
      container:
        image: alpine:3.17
        command:
          - sh
          - -c
        args:
          - >
            apk update && 
            apk add git &&
            mkdir -p {{inputs.parameters.path}} &&
            cp -r /src/* {{inputs.parameters.path}} &&
            git -C /src rev-parse --short HEAD > /tmp/version
        workingDir: /workdir
        volumeMounts:
          - name: workdir
            mountPath: /workdir
      outputs:
        parameters:
        - name: version
          valueFrom:
            path: /tmp/version

    - name: ls
      container:
        image: alpine:3.17
        command:
          - sh
          - -c
        args:
          - ls /workdir
        workingDir: /workdir
        volumeMounts:
          - name: workdir
            mountPath: /workdir

    - name: build-image
      inputs:
        parameters:
          - name: image-path
            value: ""
      container:
        image: gcr.io/kaniko-project/executor:latest
        args:
          - --dockerfile=/workdir/nerdd/apps/{{workflow.parameters.module-name}}/base/Dockerfile.prod
          - --context=/workdir/{{workflow.parameters.module-name}}
          - --destination={{inputs.parameters.image-path}}
          - --no-push
          - --tar-path=/workdir/image.tar
        workingDir: /workdir
        volumeMounts:
          - name: workdir
            mountPath: /workdir

    - name: deploy-image
      inputs:
        parameters:
          - name: image-registry
            value: ""
          - name: image-path
            value: ""
      script:
        image: gcr.io/go-containerregistry/crane:debug
        env:
          - name: OCI_REGISTRY_USER
            valueFrom:
              secretKeyRef:
                name: registry-credentials
                key: username
          - name: OCI_REGISTRY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: registry-credentials
                key: password
        command:
          - sh
        source: |
          crane auth login -u $OCI_REGISTRY_USER -p $OCI_REGISTRY_PASSWORD ghcr.io
          crane push /workdir/image.tar {{inputs.parameters.image-path}}
        volumeMounts:
          - name: workdir
            mountPath: /workdir
      

  artifactGC:
    strategy: OnWorkflowDeletion

  volumeClaimTemplates:
    - metadata:
        name: workdir
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 100Gi
        storageClassName: rook-ceph-block