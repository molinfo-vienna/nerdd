apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-main-config
  labels:
    app: nerdd-frontend
data:
  nginx.conf: |
    # Rate limiting: limit the number of requests per second to 1. If a user sends more than 1
    # request per second, the server will respond with a 503 error. The burst parameter allows
    # the user to send up to 20 requests in a row. This is useful for example when the user
    # refreshes the page and the browser sends multiple requests at once.
    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

    server {
        listen 80;
        listen [::]:80;

        root /usr/share/nginx/html;

        index index.html;

        # Hide the Nginx version number in http responses. The server responds with "nginx" instead
        # of "nginx/1.27.6". This is a security measure to prevent attackers from knowing which 
        # vulnerabilities the server might have.
        server_tokens off;

        # Set the maximum size of an upload file (or a request in general) to 500MB.
        # There are two places where limits are applied:
        # 1) In the nginx config of nerdd-frontend (here)
        # 2) In the traefik middleware of nerdd-backend (maxRequestBodyBytes directive)
        client_max_body_size 500M;

        # Indicate that the website doesn't use any browser features. At the moment, there is no
        # wildcard to disable all features at once
        # (https://github.com/w3c/webappsec-permissions-policy/issues/483). Therefore, we have to
        # disable each feature individually.
        add_header Permissions-Policy "accelerometer=(), 
                                       camera=(), 
                                       geolocation=(), 
                                       gyroscope=(), 
                                       magnetometer=(), 
                                       microphone=(), 
                                       payment=(), 
                                       usb=()";

        # HSTS: ensures that browsers always connect over HTTPS. This prevents downgrade attacks.
        # Note: 365 days = 365 * 24 * 60 * 60 seconds = 31536000 seconds.
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Do not allow the website to be embedded in an iframe (except same origin). This prevents 
        # clickjacking attacks.
        add_header X-Frame-Options "SAMEORIGIN" always;

        # Cross-site scripting (XSS) protection. This header tells the browser to block the page
        # when it detects a reflected XSS attack.
        add_header X-Xss-Protection "1; mode=block" always;

        # Content Security Policy (CSP) header. This header tells the browser which resources are
        # allowed to be loaded on the website. 
        # * "default-src: 'none'": do not allow loading any resources that were not explicitly 
        #     specified below
        # * most specified resource types (script, img, font, etc.):
        #   * 'self': allow loading resources from NERDD website and explicitly rule out requests
        #             to external websites
        # * connect-src: javascript requests (e.g. fetch or WebSocket)
        # * manifest-src: allow loading manifest.json (PWA support)
        # * script-src: javascript modules, e.g. loaded via <script src=...>
        #   * 'unsafe-inline': allow inline scripts (JSME needs that)
        #   * 'unsafe-eval': allow eval() and new Function() (JSME needs that)
        # * worker-src: web worker scripts, e.g. from code new Worker("...")
        #   * blob: : allow web workers specified with blob data (necessary for altcha challenges)
        # * img-src: image URLs, e.g. loaded via <img src=...>
        #   * data: : allow data URIs in images (not a significant risk; necessary for bootstrap, 
        #             https://getbootstrap.com/docs/5.3/customize/overview/#csps-and-embedded-svgs)
        # * object-src: legacy objects like <object> or <embed>
        # * base-uri: used for <base> elements, but this webpage does not need it
        # * font-src: font objects, e.g. loaded via @font-face { src: url(...); }
        # * style-src: style resources; implicitly blocks inline styles <style>...</style>
        #   * 'unsafe-inline': allow inline styles, e.g. <p style="..."> (JSME needs that)
        # * form-action: destination of form actions used in <form action="">
        #   * this does not prevent inline javascript actions <form action="javascript: ...">
        # * frame-ancestors: rules out embedding this web page in an iframe
        # * always: add the header to all responses
        add_header Content-Security-Policy "default-src 'none';
                                            connect-src 'self';
                                            manifest-src 'self';
                                            script-src 'self' 'unsafe-inline' 'unsafe-eval'; 
                                            worker-src 'self' blob:; 
                                            img-src 'self' data:;
                                            base-uri 'none';
                                            object-src 'none';
                                            font-src 'self';
                                            style-src 'self' 'unsafe-inline';
                                            form-action 'self';
                                            frame-ancestors 'none';" always;

        # MIME sniffing protection. This header tells the browser to not try to guess the MIME type
        # of a file. This prevents MIME sniffing attacks.
        add_header X-Content-Type-Options "nosniff" always;

        # When a user clicks on an external link on the NERDD website, the Referrer-Policy header 
        # determines which information is sent to the external website. This way the destination 
        # website can learn about the incoming traffic source. We use the value
        # "strict-origin-when-cross-origin" that does the following:
        # * If destination is on same origin, allows the full url (nerdd.univie.ac.at/page) to be 
        #   sent.
        # * If destination is on a different origin, only the domain (nerdd.univie.ac.at) is sent.
        # * Does not allow any information to be sent when a scheme downgrade (https -> http) 
        #   happens (prevents an attacker to read the referrer field in the insecure http request).
        # 
        # Examples:
        # | Origin                               | Destination                           | Referrer field
        # | ------------------------------------ | ------------------------------------- | ------------------------------------
        # | https://nerdd.univie.ac.at/some_page | https://nerdd.univie.ac.at/other_page | https://nerdd.univie.ac.at/some_page
        # | https://nerdd.univie.ac.at           | https://example.com                   | https://nerdd.univie.ac.at
        # | https://nerdd.univie.ac.at           | http://example.com                    | (nothing)
        # | https://nerdd.univie.ac.at           | http://nerdd.univie.ac.at             | (nothing)
        #
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        add_header Cross-Origin-Resource-Policy "same-origin";

        location / {
            # for each request on url $uri:
            # * first, try to get the file $uri/ (e.g. static images)
            # * second, route request to index.html (react router will render the correct page)
            try_files $uri $uri/ /index.html;
            
            # rate limiting: 
            # * use rate limiting zone specified at the start of this file
            # * allow bursts of 20 requests
            limit_req zone=one burst=20;

            # not vital, but improves performance:
            expires max;
            gzip_static on;
            gzip on;
            gzip_proxied any;
            gzip_vary on;

            gzip_types text/plain 
                       # ---- stylesheets ----
                       text/css 
                       # ---- javascript ----
                       application/json 
                       application/javascript 
                       text/javascript
                       # ---- xml ----
                       text/xml 
                       application/xml 
                       application/xml+rss 
                       # ---- fonts ----
                       # do not compress woff2 fonts: there is nothing to gain, because they are 
                       # already highly compressed
                       # ---- images ----
                       image/gif
                       image/png
                       image/x-icon;
        }

        error_page 404 /index.html;
    }
